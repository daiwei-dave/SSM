package org.seckill.dao.cache;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.seckill.entity.Seckill;

import com.dyuproject.protostuff.LinkedBuffer;
import com.dyuproject.protostuff.ProtostuffIOUtil;
import com.dyuproject.protostuff.runtime.RuntimeSchema;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;


public class RedisDao {
	private final Log LOG = LogFactory.getLog(this.getClass());
	//相当于数据库的连接池
	private final JedisPool jedisPool;

	private RuntimeSchema<Seckill> schema = RuntimeSchema
			.createFrom(Seckill.class);
	/**
	 * 连接本地的 Redis 服务
	 * @param ip
	 * @param port
	 */
	public RedisDao(String ip, int port) {
		jedisPool = new JedisPool(ip, port);
	}
	/**
	 * 获取Seckill 对象
	 * @param seckillId
	 * @return
	 */
	public Seckill getSeckill(long seckillId) {
		// redis逻辑操作
		try {
			//获取Jedis实例
			Jedis jedis = jedisPool.getResource();
			try {
				String key = "seckill:" + seckillId;
				// 并没有实现内部序列化操作
				// get:byte[]->反序列化->Object(Seckill)
				// 采用自定义序列化
				byte[] bytes = jedis.get(key.getBytes());
				if (bytes != null) {
					// 空对象
					Seckill seckill = schema.newMessage();
					ProtostuffIOUtil.mergeFrom(bytes, seckill, schema);
					// seckill 被反序列化
					return seckill;
				}
			} finally {
				//释放jedis资源
				jedis.close();
			}
		} catch (Exception e) {
			LOG.error(e.getMessage());
		}
		return null;
	}
	/**
	 * Seckill 对象传递到redis中
	 * @param seckill
	 * @return 成功返回OK，失败则返回null
	 */
	public String putSeckill(Seckill seckill) {
		//set:Object(Seckill)->序列化->byte[] ->发送给redis
		try{
			Jedis jedis=jedisPool.getResource();
			try{
				String key = "seckill:" + seckill.getSeckillId();
				byte[] bytes=ProtostuffIOUtil.toByteArray(seckill,
						schema,LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));
				//超时缓存,1小时
				int timeOut = 60 * 60;
				String result=jedis.setex(key.getBytes(), timeOut, bytes);
				return result;		
			}finally{
				jedis.close();
			}
		}catch (Exception e) {
            LOG.error(e.getMessage());
		return null;		
	}
	}
}
